{"version":3,"sources":["../../api/controllers/Login.js"],"names":["LoginController","getLogin","req","res","user","body","loginService","searchUser","then","users","json","status","data","bcrypt","compare","password","err","isMatch","jwt","sign","token","cookie"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,eAAe,GAAG;AACtBC,EAAAA,QADsB,oBACbC,GADa,EACRC,GADQ,EACH;AACjB,QAAMC,IAAI,GAAGF,GAAG,CAACG,IAAjB;;AACAC,mBAAaC,UAAb,CAAwBH,IAAxB,EAA8BI,IAA9B,CAAmC,UAACC,KAAD,EAAW;AAC5C,UAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,WAAhC,EAA6C;AAC3C,eAAON,GAAG,CAACO,IAAJ,CAAS;AACdC,UAAAA,MAAM,EAAE,SADM;AAEdC,UAAAA,IAAI,EAAE;AAFQ,SAAT,EAGJD,MAHI,CAGG,GAHH,CAAP;AAID;;AAEDE,wBAAOC,OAAP,CAAeV,IAAI,CAACW,QAApB,EAA8BN,KAAK,CAACM,QAApC,EAA8C,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC9D,YAAI,CAACA,OAAL,EAAc;AACZ,iBAAOd,GAAG,CAACO,IAAJ,CAAS;AACdC,YAAAA,MAAM,EAAE,SADM;AAEdC,YAAAA,IAAI,EAAE;AAFQ,WAAT,EAGJD,MAHI,CAGG,GAHH,CAAP;AAID;;AACDO,8BAAIC,IAAJ,CAAS;AACPV,UAAAA,KAAK,EAALA;AADO,SAAT,EAEG,WAFH,EAEgB,UAACO,GAAD,EAAMI,KAAN,EAAgB;AAC9BjB,UAAAA,GAAG,CAACkB,MAAJ,CAAW,eAAX,mBAAsCD,KAAtC;AACA,iBAAOjB,GAAG,CAACO,IAAJ,CAAS;AACdC,YAAAA,MAAM,EAAE,SADM;AAEdC,YAAAA,IAAI,EAAEH,KAFQ;AAGdW,YAAAA,KAAK,EAALA;AAHc,WAAT,EAIJT,MAJI,CAIG,GAJH,CAAP;AAKD,SATD;AAUD,OAjBD;AAkBD,KA1BD;AA2BD;AA9BqB,CAAxB;eAiCeX,e","sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport loginService from '../services/Login';\r\n\r\nconst LoginController = {\r\n  getLogin(req, res) {\r\n    const user = req.body;\r\n    loginService.searchUser(user).then((users) => {\r\n      if (users === null || users === 'undefined') {\r\n        return res.json({\r\n          status: 'success',\r\n          data: 'Invalid Email',\r\n        }).status(200);\r\n      }\r\n\r\n      bcrypt.compare(user.password, users.password, (err, isMatch) => {\r\n        if (!isMatch) {\r\n          return res.json({\r\n            status: 'success',\r\n            data: 'Invalid Password',\r\n          }).status(200);\r\n        }\r\n        jwt.sign({\r\n          users,\r\n        }, 'secretkey', (err, token) => {\r\n          res.cookie('Authorization', `Bearer ${token}`);\r\n          return res.json({\r\n            status: 'success',\r\n            data: users,\r\n            token,\r\n          }).status(200);\r\n        });\r\n      });\r\n    });\r\n  },\r\n};\r\n\r\nexport default LoginController;\r\n"],"file":"Login.js"}